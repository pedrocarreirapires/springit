*******************************************************************************************************
					SPRING BOOT 2 COURSE - DAN VEGA
*******************************************************************************************************
Course Objectives:

- Github Repository
- Spring Boot Essencials
- Spring MVC: Model
- Database Layer
- Spring MVC: Controller
- Spring Security
- Spring MVC: The Service Layer
- Spring MVC: The View Layer

*******************************************************************************************************

https://github.com/danvega/springit

*******************************************************************************************************

Jpa =/= Jdbc (https://www.baeldung.com/jpa-vs-jdbc)

JDBC -> Is a programming-level interface for Java applications that communicate with a database. An application uses this API to communicate with a JDBC manager.

JPA  -> Is a Java standard that allows us to bind Java objects to records in a relational database. It's one possible approach to Object Relationship Mapping(ORM), allowing the developer to retrieve, store, update, and delete data in a relational database using Java objects. Several implementations are available for the JPA specification.

*******************************************************************************************************

Authenticatoin vs Authorization

Authentication -> is the process of determining that somebody is really who they claim to be;
Authorization  -> is the process of verifying that u have acess to something (bc the permissions configured).

*******************************************************************************************************

@Controller vs @RestController

@Controller     -> Return uma string de view (ex: return "/index")
@RestController -> Return a result

*******************************************************************************************************

@Transacional -> Belongs to the Service layer because it is the Service layer’s responsibility to define the transaction boundaries.

For transactional services, it’s good practice to set the readOnly attribute to true at the class level and override it on a per-method basis for the service methods that need to write to the database.

*******************************************************************************************************

@Transient -> Something that we dont save in the Data Base.

*******************************************************************************************************

*******************************************************************************************************
////////// *********** ////////// *********** ////////// *********** ////////// *********** ////////// 
*******************************************************************************************************















